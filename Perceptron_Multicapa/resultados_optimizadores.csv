Learning Rate,Épocas,# Capas,# Neuronas,Accuracy,Loss,Precision,Recall
0.01,10,3,"[128, 64, 300]",0.9423015713691711,0.19289326667785645,0.9698049774849973,0.9692857142857143
0.001,10,3,"[128, 64, 300]",0.9678571224212646,0.13697312772274017,0.9698049774849973,0.9692857142857143
0.001,10,3,"[128, 64, 300]",0.969682514667511,0.15851253271102905,0.9698049774849973,0.9692857142857143
0.001,10,3,"[128, 64, 300]",0.9713491797447205,0.12640869617462158,0.9698049774849973,0.9692857142857143
1.0,10,3,"[128, 64, 300]",0.9692857265472412,0.13142825663089752,0.9698049774849973,0.9692857142857143
from sklearn.metrics import classification_report

# Diccionario para almacenar las métricas por optimizador
resultados = {
    'Learning Rate': [],
    'Épocas': [],
    '# Capas': [],
    '# Neuronas': [],
    'Accuracy': [],
    'Loss': [],
    'Precision': [],
    'Recall': []
}

# Suponiendo que ya tienes los datos en histories
for opt_name, history in histories.items():
    learning_rate = optimizers[opt_name].learning_rate.numpy()  # Tasa de aprendizaje
    epocas = len(history.history['accuracy'])  # Número de épocas
    capas = len(hidden_layers)  # Número de capas ocultas (ajústalo según tu arquitectura)
    neuronas = str(hidden_layers)  # Neuronas por capa

    # Últimos valores de accuracy y loss
    accuracy = history.history['val_accuracy'][-1]
    loss = history.history['val_loss'][-1]

    # Obtener predicciones en el conjunto de validación
    y_val_pred = model.predict(x_val)
    y_val_pred_classes = np.argmax(y_val_pred, axis=1)
    y_val_true_classes = np.argmax(y_val, axis=1)

    # Calcular precision y recall usando classification_report
    report = classification_report(y_val_true_classes, y_val_pred_classes, output_dict=True)
    precision = report['weighted avg']['precision']
    recall = report['weighted avg']['recall']

    # Rellenar los datos en el diccionario
    resultados['Learning Rate'].append(learning_rate)
    resultados['Épocas'].append(epocas)
    resultados['# Capas'].append(capas)
    resultados['# Neuronas'].append(neuronas)
    resultados['Accuracy'].append(accuracy)
    resultados['Loss'].append(loss)
    resultados['Precision'].append(precision)
    resultados['Recall'].append(recall)

# Convertir el diccionario en un DataFrame de pandas
df = pd.DataFrame(resultados)

# Mostrar la tabla
print(df)

# Si quieres guardarla en un archivo CSV para usarla después:
df.to_csv('resultados_optimizadores.csv', index=False)
